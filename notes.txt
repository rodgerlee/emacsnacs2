Redux:

- npm install redux react-redux redux-thunk @types/redux-thunk
- create redux directory in src
    create store.types
    actions
    models
    reducers
        userReducer.ts  


redux is a state manager. STORE: global state
connect store to App.tsx
    import { Provider } from 'react-redux'
        npm install @types/react-redux
    import store from ./src/redux           --> do this by creating a index.ts file in redux, and export * (all) from './store'

    use a Provider and wrap the Appnavigation in App()
        the app will try to pull data from store, which contains the rootReducer 
        the rootReducer should combine all of our reducers.



Actions; 
-  an event that describes something that happened in the application.
Reducers:
 - functions that take the current state and an action as arguments, and return a new state result.

    rootReducer combines reducers
    shoppingReducer calls the shoppingAction, which calls the API and gives us a payload data for randomrecipes
    shoppingaction will call a dispatch function, to change the state. 

    
Models:
- models contain the interfaces of our API and user data.
    data retrieved from a API GET request can be organized using interfaces.
    the interfaces will be exported and used in reducers and actions.


HOW TO CONNECT API:


    you can use rapidAPI: 
        use rapidAPI, use following credentials (Rodger's RapidAPI account)
        https://rapidapi.com/blog/how-to-use-an-api-with-typescript/
        https://english.api.rakuten.net/spoonacular/api/recipe-food-nutrition?endpoint=57d3f037e4b0bf08d74df7f5

        "x-rapidapi-host": "spoonacular-recipe-food-nutrition-v1.p.rapidapi.com",
        "x-rapidapi-key": "4cfc845398msh8ef01df1a88c5cdp13b6f9jsn39afa8e55c0e"


    you can use spoonacularAPI directly. 
        - one tip: load the API into postman. use API-key, to make get requests.
        ex. 
        {{baseUrl}}/recipes/random?apiKey=013c92878d5b4b198faa13d241b413dd&limitLicense=false&tags=&number=1
        is the url to make a api call for 
            - 1 random recipe
       
        Rodger's spoonacular API key: 013c92878d5b4b198faa13d241b413dd
        
    

    to use a get request to the API through react-native typescript,
    you can use the following example code, used for Get Random Recipes option.
    change the const url to match the type of API request. 
        RapidAPI Code snippets should give an example code for the URL.
    this method is a Javascript 'fetch' API call, and is lightweight and easy to use.
    
        const fetchApiCall = () => {
            async function getCrypto ( query: object ): Promise<object> {
            const url = new URL('https://spoonacular-recipe-food-nutrition-v1.p.rapidapi.com/recipes/random?number=2&tags=vegetarian%252Cdessert');
            // url.search = new URLSearchParams( query ).toString();
            const headers = {
                "x-rapidapi-host": "spoonacular-recipe-food-nutrition-v1.p.rapidapi.com",
                "x-rapidapi-key": "4cfc845398msh8ef01df1a88c5cdp13b6f9jsn39afa8e55c0e",
            };
            const response = await fetch( url.toString(), {headers} );
            return await response.json();
        };
            const query = {
                asset: "BTC",
                exchange: "Kraken",
                denominator: "USD",
            };
            (async () => {
                const data = await getCrypto( query );
                console.log(data)
            })()
            
        }


    another option to make API requests is axios:
        npm install axios

        import axios from 'axios'

        use async function for dispatch function in a redux Action.
        ex. 
            return async ( dispatch: Dispatch<ShoppingAction>) => {
                try {

                    const response = await axios.get<RecipeContainer>(`${BASE_URL}/recipes/random?apiKey=013c92878d5b4b198faa13d241b413dd&number=2&tags=vegetarian%252Cdessert`)

                    if(!response){
                        dispatch({
                            type: 'ON_SHOPPING_ERROR',
                            payload: 'Availability error'
                        })
                    } else {
                        dispatch({
                            type: 'ON_AVAILABILITY',
                            payload: response.data
                        })
                    }
                } catch(error) {
                    dispatch({
                        type: 'ON_SHOPPING_ERROR',
                        payload: error
                    })
                }

            }